// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/NTHU-LSALAB/NTHU-Distributed-System/modules/video/pb (interfaces: Video_UploadVideoServer)

// Package pbmock is a generated GoMock package.
package pbmock

import (
	context "context"
	reflect "reflect"

	pb "github.com/NTHU-LSALAB/NTHU-Distributed-System/modules/video/pb"
	gomock "github.com/golang/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
)

// MockVideo_UploadVideoServer is a mock of Video_UploadVideoServer interface.
type MockVideo_UploadVideoServer struct {
	ctrl     *gomock.Controller
	recorder *MockVideo_UploadVideoServerMockRecorder
}

// MockVideo_UploadVideoServerMockRecorder is the mock recorder for MockVideo_UploadVideoServer.
type MockVideo_UploadVideoServerMockRecorder struct {
	mock *MockVideo_UploadVideoServer
}

// NewMockVideo_UploadVideoServer creates a new mock instance.
func NewMockVideo_UploadVideoServer(ctrl *gomock.Controller) *MockVideo_UploadVideoServer {
	mock := &MockVideo_UploadVideoServer{ctrl: ctrl}
	mock.recorder = &MockVideo_UploadVideoServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVideo_UploadVideoServer) EXPECT() *MockVideo_UploadVideoServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockVideo_UploadVideoServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockVideo_UploadVideoServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockVideo_UploadVideoServer)(nil).Context))
}

// Recv mocks base method.
func (m *MockVideo_UploadVideoServer) Recv() (*pb.UploadVideoRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pb.UploadVideoRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockVideo_UploadVideoServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockVideo_UploadVideoServer)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockVideo_UploadVideoServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockVideo_UploadVideoServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockVideo_UploadVideoServer)(nil).RecvMsg), arg0)
}

// SendAndClose mocks base method.
func (m *MockVideo_UploadVideoServer) SendAndClose(arg0 *pb.UploadVideoResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose.
func (mr *MockVideo_UploadVideoServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockVideo_UploadVideoServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method.
func (m *MockVideo_UploadVideoServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockVideo_UploadVideoServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockVideo_UploadVideoServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockVideo_UploadVideoServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockVideo_UploadVideoServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockVideo_UploadVideoServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockVideo_UploadVideoServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockVideo_UploadVideoServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockVideo_UploadVideoServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockVideo_UploadVideoServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockVideo_UploadVideoServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockVideo_UploadVideoServer)(nil).SetTrailer), arg0)
}
